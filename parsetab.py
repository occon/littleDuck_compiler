
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON COMMA CTE_FLOAT CTE_INT CTE_STRING DIVIDE DO ELSE END EQUAL FLOAT GREATERTHAN ID IF INT LBRACE LESSTHAN LPARENTH MAIN MINUS MULTIPLY NOTEQUAL PLUS PRINT PROGRAM RBRACE RPARENTH SEMICOLON STRING VAR VOID WHILE\n    Programa : PROGRAM ID SEMICOLON VARS FUNCS MAIN Body END SEMICOLON\n    \n    VARS : VAR ListaVars COLON TYPE SEMICOLON\n         | \n    \n    ListaVars : ID COMMA ListaVars\n              | ID COLON TYPE SEMICOLON\n    \n    TYPE : INT\n         | FLOAT\n         | STRING\n    \n    FUNCS : Funcion FUNCS\n          | \n    \n    Funcion : TipoFunc ID LPARENTH Parametros RPARENTH COLON Body\n    \n    TipoFunc : VOID\n             | TYPE\n    \n    Parametros : ID COMMA Parametros\n               | ID COLON TYPE\n               | \n    \n    Body : LBRACE Statements RBRACE\n    \n    Statements : Statement Statements\n               | \n    \n    Statement : ASSIGN\n              | CONDITION\n              | CYCLE\n              | F_Call\n              | Print\n    \n    ASSIGN : ID EQUAL Expresion SEMICOLON\n    \n    CONDITION : IF LPARENTH Expresion RPARENTH Body \n              | IF LPARENTH Expresion RPARENTH Body ELSE Body\n    \n        CYCLE : WHILE LPARENTH Expresion RPARENTH Body SEMICOLON\n              | DO Body WHILE LPARENTH Expresion RPARENTH SEMICOLON\n    \n    F_Call : ID LPARENTH Expresiones RPARENTH SEMICOLON\n    \n    Expresiones : Expresion COMMA Expresiones\n                | Expresion\n                | \n    \n    Print : PRINT LPARENTH Expresiones RPARENTH SEMICOLON\n    \n    Expresion : Expresion NOTEQUAL Exp\n              | Expresion LESSTHAN Exp\n              | Expresion GREATERTHAN Exp\n              | Exp\n    \n    Exp : Exp PLUS Termino\n        | Exp MINUS Termino\n        | Termino\n    \n    Termino : Termino MULTIPLY Factor\n            | Termino DIVIDE Factor\n            | Factor\n    \n    Factor : LPARENTH Expresion RPARENTH\n           | PLUS Subf\n           | MINUS Subf\n           | Subf\n    \n    Subf : CTE\n         | ID\n    \n    CTE : CTE_INT\n        | CTE_FLOAT\n        | CTE_STRING\n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,46,],[0,-1,]),'ID':([2,6,9,10,11,12,13,14,21,24,25,31,32,33,34,35,36,47,49,50,51,52,54,55,61,63,65,80,81,82,83,84,85,87,88,92,95,106,108,111,113,115,116,],[3,16,19,-12,-13,-6,-7,-8,16,37,42,37,-20,-21,-22,-23,-24,-17,58,58,58,58,58,42,58,58,58,-25,58,58,58,58,58,58,58,58,58,-30,-26,-34,-28,-27,-29,]),'SEMICOLON':([3,12,13,14,26,28,29,47,58,59,60,62,64,66,67,68,69,70,86,89,91,96,98,99,100,101,102,103,104,105,109,114,],[4,-6,-7,-8,44,45,46,-17,-50,80,-38,-41,-44,-48,-49,-51,-52,-53,-46,-47,106,111,-35,-36,-37,-39,-40,-42,-43,-45,113,116,]),'VAR':([4,],[6,]),'VOID':([4,5,8,44,47,97,],[-3,10,10,-2,-17,-11,]),'INT':([4,5,8,20,22,44,47,56,97,],[-3,12,12,12,12,-2,-17,12,-11,]),'FLOAT':([4,5,8,20,22,44,47,56,97,],[-3,13,13,13,13,-2,-17,13,-11,]),'STRING':([4,5,8,20,22,44,47,56,97,],[-3,14,14,14,14,-2,-17,14,-11,]),'MAIN':([4,5,7,8,18,44,47,97,],[-3,-10,17,-10,-9,-2,-17,-11,]),'RPARENTH':([12,13,14,25,43,50,54,55,58,60,62,64,66,67,68,69,70,71,72,73,74,76,77,78,86,89,90,92,98,99,100,101,102,103,104,105,107,110,],[-6,-7,-8,-16,57,-33,-33,-16,-50,-38,-41,-44,-48,-49,-51,-52,-53,91,-32,93,94,96,-14,-15,-46,-47,105,-33,-35,-36,-37,-39,-40,-42,-43,-45,-31,114,]),'COLON':([15,16,27,42,45,57,],[20,22,-4,56,-5,79,]),'COMMA':([16,42,58,60,62,64,66,67,68,69,70,72,86,89,98,99,100,101,102,103,104,105,],[21,55,-50,-38,-41,-44,-48,-49,-51,-52,-53,92,-46,-47,-35,-36,-37,-39,-40,-42,-43,-45,]),'LBRACE':([17,40,79,93,94,112,],[24,24,24,24,24,24,]),'LPARENTH':([19,37,38,39,41,49,50,51,52,54,65,75,81,82,83,84,85,87,88,92,95,],[25,50,51,52,54,65,65,65,65,65,65,95,65,65,65,65,65,65,65,65,65,]),'END':([23,47,],[29,-17,]),'RBRACE':([24,30,31,32,33,34,35,36,47,48,80,106,108,111,113,115,116,],[-19,47,-19,-20,-21,-22,-23,-24,-17,-18,-25,-30,-26,-34,-28,-27,-29,]),'IF':([24,31,32,33,34,35,36,47,80,106,108,111,113,115,116,],[38,38,-20,-21,-22,-23,-24,-17,-25,-30,-26,-34,-28,-27,-29,]),'WHILE':([24,31,32,33,34,35,36,47,53,80,106,108,111,113,115,116,],[39,39,-20,-21,-22,-23,-24,-17,75,-25,-30,-26,-34,-28,-27,-29,]),'DO':([24,31,32,33,34,35,36,47,80,106,108,111,113,115,116,],[40,40,-20,-21,-22,-23,-24,-17,-25,-30,-26,-34,-28,-27,-29,]),'PRINT':([24,31,32,33,34,35,36,47,80,106,108,111,113,115,116,],[41,41,-20,-21,-22,-23,-24,-17,-25,-30,-26,-34,-28,-27,-29,]),'EQUAL':([37,],[49,]),'ELSE':([47,108,],[-17,112,]),'PLUS':([49,50,51,52,54,58,60,62,64,65,66,67,68,69,70,81,82,83,84,85,86,87,88,89,92,95,98,99,100,101,102,103,104,105,],[61,61,61,61,61,-50,84,-41,-44,61,-48,-49,-51,-52,-53,61,61,61,61,61,-46,61,61,-47,61,61,84,84,84,-39,-40,-42,-43,-45,]),'MINUS':([49,50,51,52,54,58,60,62,64,65,66,67,68,69,70,81,82,83,84,85,86,87,88,89,92,95,98,99,100,101,102,103,104,105,],[63,63,63,63,63,-50,85,-41,-44,63,-48,-49,-51,-52,-53,63,63,63,63,63,-46,63,63,-47,63,63,85,85,85,-39,-40,-42,-43,-45,]),'CTE_INT':([49,50,51,52,54,61,63,65,81,82,83,84,85,87,88,92,95,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'CTE_FLOAT':([49,50,51,52,54,61,63,65,81,82,83,84,85,87,88,92,95,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'CTE_STRING':([49,50,51,52,54,61,63,65,81,82,83,84,85,87,88,92,95,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'MULTIPLY':([58,62,64,66,67,68,69,70,86,89,101,102,103,104,105,],[-50,87,-44,-48,-49,-51,-52,-53,-46,-47,87,87,-42,-43,-45,]),'DIVIDE':([58,62,64,66,67,68,69,70,86,89,101,102,103,104,105,],[-50,88,-44,-48,-49,-51,-52,-53,-46,-47,88,88,-42,-43,-45,]),'NOTEQUAL':([58,59,60,62,64,66,67,68,69,70,72,73,74,86,89,90,98,99,100,101,102,103,104,105,110,],[-50,81,-38,-41,-44,-48,-49,-51,-52,-53,81,81,81,-46,-47,81,-35,-36,-37,-39,-40,-42,-43,-45,81,]),'LESSTHAN':([58,59,60,62,64,66,67,68,69,70,72,73,74,86,89,90,98,99,100,101,102,103,104,105,110,],[-50,82,-38,-41,-44,-48,-49,-51,-52,-53,82,82,82,-46,-47,82,-35,-36,-37,-39,-40,-42,-43,-45,82,]),'GREATERTHAN':([58,59,60,62,64,66,67,68,69,70,72,73,74,86,89,90,98,99,100,101,102,103,104,105,110,],[-50,83,-38,-41,-44,-48,-49,-51,-52,-53,83,83,83,-46,-47,83,-35,-36,-37,-39,-40,-42,-43,-45,83,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Programa':([0,],[1,]),'VARS':([4,],[5,]),'FUNCS':([5,8,],[7,18,]),'Funcion':([5,8,],[8,8,]),'TipoFunc':([5,8,],[9,9,]),'TYPE':([5,8,20,22,56,],[11,11,26,28,78,]),'ListaVars':([6,21,],[15,27,]),'Body':([17,40,79,93,94,112,],[23,53,97,108,109,115,]),'Statements':([24,31,],[30,48,]),'Statement':([24,31,],[31,31,]),'ASSIGN':([24,31,],[32,32,]),'CONDITION':([24,31,],[33,33,]),'CYCLE':([24,31,],[34,34,]),'F_Call':([24,31,],[35,35,]),'Print':([24,31,],[36,36,]),'Parametros':([25,55,],[43,77,]),'Expresion':([49,50,51,52,54,65,92,95,],[59,72,73,74,72,90,72,110,]),'Exp':([49,50,51,52,54,65,81,82,83,92,95,],[60,60,60,60,60,60,98,99,100,60,60,]),'Termino':([49,50,51,52,54,65,81,82,83,84,85,92,95,],[62,62,62,62,62,62,62,62,62,101,102,62,62,]),'Factor':([49,50,51,52,54,65,81,82,83,84,85,87,88,92,95,],[64,64,64,64,64,64,64,64,64,64,64,103,104,64,64,]),'Subf':([49,50,51,52,54,61,63,65,81,82,83,84,85,87,88,92,95,],[66,66,66,66,66,86,89,66,66,66,66,66,66,66,66,66,66,]),'CTE':([49,50,51,52,54,61,63,65,81,82,83,84,85,87,88,92,95,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'Expresiones':([50,54,92,],[71,76,107,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Programa","S'",1,None,None,None),
  ('Programa -> PROGRAM ID SEMICOLON VARS FUNCS MAIN Body END SEMICOLON','Programa',9,'p_programa','littleDuck_parser.py',6),
  ('VARS -> VAR ListaVars COLON TYPE SEMICOLON','VARS',5,'p_vars','littleDuck_parser.py',11),
  ('VARS -> <empty>','VARS',0,'p_vars','littleDuck_parser.py',12),
  ('ListaVars -> ID COMMA ListaVars','ListaVars',3,'p_listaVars','littleDuck_parser.py',17),
  ('ListaVars -> ID COLON TYPE SEMICOLON','ListaVars',4,'p_listaVars','littleDuck_parser.py',18),
  ('TYPE -> INT','TYPE',1,'p_type','littleDuck_parser.py',23),
  ('TYPE -> FLOAT','TYPE',1,'p_type','littleDuck_parser.py',24),
  ('TYPE -> STRING','TYPE',1,'p_type','littleDuck_parser.py',25),
  ('FUNCS -> Funcion FUNCS','FUNCS',2,'p_funcs','littleDuck_parser.py',30),
  ('FUNCS -> <empty>','FUNCS',0,'p_funcs','littleDuck_parser.py',31),
  ('Funcion -> TipoFunc ID LPARENTH Parametros RPARENTH COLON Body','Funcion',7,'p_funcion','littleDuck_parser.py',36),
  ('TipoFunc -> VOID','TipoFunc',1,'p_tipoFunc','littleDuck_parser.py',41),
  ('TipoFunc -> TYPE','TipoFunc',1,'p_tipoFunc','littleDuck_parser.py',42),
  ('Parametros -> ID COMMA Parametros','Parametros',3,'p_parametros','littleDuck_parser.py',47),
  ('Parametros -> ID COLON TYPE','Parametros',3,'p_parametros','littleDuck_parser.py',48),
  ('Parametros -> <empty>','Parametros',0,'p_parametros','littleDuck_parser.py',49),
  ('Body -> LBRACE Statements RBRACE','Body',3,'p_body','littleDuck_parser.py',54),
  ('Statements -> Statement Statements','Statements',2,'p_statements','littleDuck_parser.py',59),
  ('Statements -> <empty>','Statements',0,'p_statements','littleDuck_parser.py',60),
  ('Statement -> ASSIGN','Statement',1,'p_statement','littleDuck_parser.py',65),
  ('Statement -> CONDITION','Statement',1,'p_statement','littleDuck_parser.py',66),
  ('Statement -> CYCLE','Statement',1,'p_statement','littleDuck_parser.py',67),
  ('Statement -> F_Call','Statement',1,'p_statement','littleDuck_parser.py',68),
  ('Statement -> Print','Statement',1,'p_statement','littleDuck_parser.py',69),
  ('ASSIGN -> ID EQUAL Expresion SEMICOLON','ASSIGN',4,'p_assign','littleDuck_parser.py',74),
  ('CONDITION -> IF LPARENTH Expresion RPARENTH Body','CONDITION',5,'p_condition','littleDuck_parser.py',79),
  ('CONDITION -> IF LPARENTH Expresion RPARENTH Body ELSE Body','CONDITION',7,'p_condition','littleDuck_parser.py',80),
  ('CYCLE -> WHILE LPARENTH Expresion RPARENTH Body SEMICOLON','CYCLE',6,'p_cycle','littleDuck_parser.py',85),
  ('CYCLE -> DO Body WHILE LPARENTH Expresion RPARENTH SEMICOLON','CYCLE',7,'p_cycle','littleDuck_parser.py',86),
  ('F_Call -> ID LPARENTH Expresiones RPARENTH SEMICOLON','F_Call',5,'p_f_call','littleDuck_parser.py',91),
  ('Expresiones -> Expresion COMMA Expresiones','Expresiones',3,'p_expresiones','littleDuck_parser.py',96),
  ('Expresiones -> Expresion','Expresiones',1,'p_expresiones','littleDuck_parser.py',97),
  ('Expresiones -> <empty>','Expresiones',0,'p_expresiones','littleDuck_parser.py',98),
  ('Print -> PRINT LPARENTH Expresiones RPARENTH SEMICOLON','Print',5,'p_print','littleDuck_parser.py',103),
  ('Expresion -> Expresion NOTEQUAL Exp','Expresion',3,'p_expresion','littleDuck_parser.py',108),
  ('Expresion -> Expresion LESSTHAN Exp','Expresion',3,'p_expresion','littleDuck_parser.py',109),
  ('Expresion -> Expresion GREATERTHAN Exp','Expresion',3,'p_expresion','littleDuck_parser.py',110),
  ('Expresion -> Exp','Expresion',1,'p_expresion','littleDuck_parser.py',111),
  ('Exp -> Exp PLUS Termino','Exp',3,'p_exp','littleDuck_parser.py',116),
  ('Exp -> Exp MINUS Termino','Exp',3,'p_exp','littleDuck_parser.py',117),
  ('Exp -> Termino','Exp',1,'p_exp','littleDuck_parser.py',118),
  ('Termino -> Termino MULTIPLY Factor','Termino',3,'p_termino','littleDuck_parser.py',123),
  ('Termino -> Termino DIVIDE Factor','Termino',3,'p_termino','littleDuck_parser.py',124),
  ('Termino -> Factor','Termino',1,'p_termino','littleDuck_parser.py',125),
  ('Factor -> LPARENTH Expresion RPARENTH','Factor',3,'p_factor','littleDuck_parser.py',130),
  ('Factor -> PLUS Subf','Factor',2,'p_factor','littleDuck_parser.py',131),
  ('Factor -> MINUS Subf','Factor',2,'p_factor','littleDuck_parser.py',132),
  ('Factor -> Subf','Factor',1,'p_factor','littleDuck_parser.py',133),
  ('Subf -> CTE','Subf',1,'p_subf','littleDuck_parser.py',138),
  ('Subf -> ID','Subf',1,'p_subf','littleDuck_parser.py',139),
  ('CTE -> CTE_INT','CTE',1,'p_cte','littleDuck_parser.py',144),
  ('CTE -> CTE_FLOAT','CTE',1,'p_cte','littleDuck_parser.py',145),
  ('CTE -> CTE_STRING','CTE',1,'p_cte','littleDuck_parser.py',146),
]
