
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON COMMA CTE_FLOAT CTE_INT CTE_STRING DIVIDE DO ELSE END EQUAL FLOAT GREATERTHAN ID IF INT LBRACE LESSTHAN LPARENTH MAIN MINUS MULTIPLY NOTEQUAL PLUS PRINT PROGRAM RBRACE RPARENTH SEMICOLON STRING VAR VOID WHILE\n    Programa : PROGRAM ID SEMICOLON VARS FUNCS MAIN Body END SEMICOLON\n    \n    VARS : VAR ListaVars COLON TYPE SEMICOLON\n         | \n    \n    ListaVars : ID COMMA ListaVars\n              | ID\n    \n    TYPE : INT\n         | FLOAT\n         | STRING\n    \n    FUNCS : Funcion FUNCS\n          | \n    \n    Funcion : TipoFunc ID LPARENTH Parametros RPARENTH COLON Body\n    \n    TipoFunc : VOID\n             | TYPE\n    \n    Parametros : ID COMMA Parametros\n               | ID COLON TYPE\n               | \n    \n    Body : LBRACE Statements RBRACE\n    \n    Statements : Statement Statements\n               | \n    \n    Statement : ASSIGN\n              | CONDITION\n              | CYCLE\n              | F_Call\n              | Print\n    \n    ASSIGN : ID EQUAL Expresion SEMICOLON\n    \n    CONDITION : IF LPARENTH Expresion RPARENTH Body \n              | IF LPARENTH Expresion RPARENTH Body ELSE Body\n    \n        CYCLE : WHILE LPARENTH Expresion RPARENTH Body SEMICOLON\n              | DO Body WHILE LPARENTH Expresion RPARENTH SEMICOLON\n    \n    F_Call : ID LPARENTH Expresiones RPARENTH SEMICOLON\n    \n    Expresiones : Expresion COMMA Expresiones\n                | Expresion\n                | \n    \n    Print : PRINT LPARENTH Expresiones RPARENTH SEMICOLON\n    \n    Expresion : Expresion NOTEQUAL Exp\n              | Expresion LESSTHAN Exp\n              | Expresion GREATERTHAN Exp\n              | Exp\n    \n    Exp : Exp PLUS Termino\n        | Exp MINUS Termino\n        | Termino\n    \n    Termino : Termino MULTIPLY Factor\n            | Termino DIVIDE Factor\n            | Factor\n    \n    Factor : LPARENTH Expresion RPARENTH\n           | PLUS Subf\n           | MINUS Subf\n           | Subf\n    \n    Subf : CTE\n         | ID\n    \n    CTE : CTE_INT\n        | CTE_FLOAT\n        | CTE_STRING\n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,43,],[0,-1,]),'ID':([2,6,9,10,11,12,13,14,21,23,24,29,30,31,32,33,34,44,46,47,48,49,51,52,58,60,62,77,78,79,80,81,82,84,85,89,92,103,105,108,110,112,113,],[3,16,19,-12,-13,-6,-7,-8,16,35,40,35,-20,-21,-22,-23,-24,-17,55,55,55,55,55,40,55,55,55,-25,55,55,55,55,55,55,55,55,55,-30,-26,-34,-28,-27,-29,]),'SEMICOLON':([3,12,13,14,25,27,44,55,56,57,59,61,63,64,65,66,67,83,86,88,93,95,96,97,98,99,100,101,102,106,111,],[4,-6,-7,-8,42,43,-17,-50,77,-38,-41,-44,-48,-49,-51,-52,-53,-46,-47,103,108,-35,-36,-37,-39,-40,-42,-43,-45,110,113,]),'VAR':([4,],[6,]),'VOID':([4,5,8,42,44,94,],[-3,10,10,-2,-17,-11,]),'INT':([4,5,8,20,42,44,53,94,],[-3,12,12,12,-2,-17,12,-11,]),'FLOAT':([4,5,8,20,42,44,53,94,],[-3,13,13,13,-2,-17,13,-11,]),'STRING':([4,5,8,20,42,44,53,94,],[-3,14,14,14,-2,-17,14,-11,]),'MAIN':([4,5,7,8,18,42,44,94,],[-3,-10,17,-10,-9,-2,-17,-11,]),'RPARENTH':([12,13,14,24,41,47,51,52,55,57,59,61,63,64,65,66,67,68,69,70,71,73,74,75,83,86,87,89,95,96,97,98,99,100,101,102,104,107,],[-6,-7,-8,-16,54,-33,-33,-16,-50,-38,-41,-44,-48,-49,-51,-52,-53,88,-32,90,91,93,-14,-15,-46,-47,102,-33,-35,-36,-37,-39,-40,-42,-43,-45,-31,111,]),'COLON':([15,16,26,40,54,],[20,-5,-4,53,76,]),'COMMA':([16,40,55,57,59,61,63,64,65,66,67,69,83,86,95,96,97,98,99,100,101,102,],[21,52,-50,-38,-41,-44,-48,-49,-51,-52,-53,89,-46,-47,-35,-36,-37,-39,-40,-42,-43,-45,]),'LBRACE':([17,38,76,90,91,109,],[23,23,23,23,23,23,]),'LPARENTH':([19,35,36,37,39,46,47,48,49,51,62,72,78,79,80,81,82,84,85,89,92,],[24,47,48,49,51,62,62,62,62,62,62,92,62,62,62,62,62,62,62,62,62,]),'END':([22,44,],[27,-17,]),'RBRACE':([23,28,29,30,31,32,33,34,44,45,77,103,105,108,110,112,113,],[-19,44,-19,-20,-21,-22,-23,-24,-17,-18,-25,-30,-26,-34,-28,-27,-29,]),'IF':([23,29,30,31,32,33,34,44,77,103,105,108,110,112,113,],[36,36,-20,-21,-22,-23,-24,-17,-25,-30,-26,-34,-28,-27,-29,]),'WHILE':([23,29,30,31,32,33,34,44,50,77,103,105,108,110,112,113,],[37,37,-20,-21,-22,-23,-24,-17,72,-25,-30,-26,-34,-28,-27,-29,]),'DO':([23,29,30,31,32,33,34,44,77,103,105,108,110,112,113,],[38,38,-20,-21,-22,-23,-24,-17,-25,-30,-26,-34,-28,-27,-29,]),'PRINT':([23,29,30,31,32,33,34,44,77,103,105,108,110,112,113,],[39,39,-20,-21,-22,-23,-24,-17,-25,-30,-26,-34,-28,-27,-29,]),'EQUAL':([35,],[46,]),'ELSE':([44,105,],[-17,109,]),'PLUS':([46,47,48,49,51,55,57,59,61,62,63,64,65,66,67,78,79,80,81,82,83,84,85,86,89,92,95,96,97,98,99,100,101,102,],[58,58,58,58,58,-50,81,-41,-44,58,-48,-49,-51,-52,-53,58,58,58,58,58,-46,58,58,-47,58,58,81,81,81,-39,-40,-42,-43,-45,]),'MINUS':([46,47,48,49,51,55,57,59,61,62,63,64,65,66,67,78,79,80,81,82,83,84,85,86,89,92,95,96,97,98,99,100,101,102,],[60,60,60,60,60,-50,82,-41,-44,60,-48,-49,-51,-52,-53,60,60,60,60,60,-46,60,60,-47,60,60,82,82,82,-39,-40,-42,-43,-45,]),'CTE_INT':([46,47,48,49,51,58,60,62,78,79,80,81,82,84,85,89,92,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'CTE_FLOAT':([46,47,48,49,51,58,60,62,78,79,80,81,82,84,85,89,92,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'CTE_STRING':([46,47,48,49,51,58,60,62,78,79,80,81,82,84,85,89,92,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'MULTIPLY':([55,59,61,63,64,65,66,67,83,86,98,99,100,101,102,],[-50,84,-44,-48,-49,-51,-52,-53,-46,-47,84,84,-42,-43,-45,]),'DIVIDE':([55,59,61,63,64,65,66,67,83,86,98,99,100,101,102,],[-50,85,-44,-48,-49,-51,-52,-53,-46,-47,85,85,-42,-43,-45,]),'NOTEQUAL':([55,56,57,59,61,63,64,65,66,67,69,70,71,83,86,87,95,96,97,98,99,100,101,102,107,],[-50,78,-38,-41,-44,-48,-49,-51,-52,-53,78,78,78,-46,-47,78,-35,-36,-37,-39,-40,-42,-43,-45,78,]),'LESSTHAN':([55,56,57,59,61,63,64,65,66,67,69,70,71,83,86,87,95,96,97,98,99,100,101,102,107,],[-50,79,-38,-41,-44,-48,-49,-51,-52,-53,79,79,79,-46,-47,79,-35,-36,-37,-39,-40,-42,-43,-45,79,]),'GREATERTHAN':([55,56,57,59,61,63,64,65,66,67,69,70,71,83,86,87,95,96,97,98,99,100,101,102,107,],[-50,80,-38,-41,-44,-48,-49,-51,-52,-53,80,80,80,-46,-47,80,-35,-36,-37,-39,-40,-42,-43,-45,80,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Programa':([0,],[1,]),'VARS':([4,],[5,]),'FUNCS':([5,8,],[7,18,]),'Funcion':([5,8,],[8,8,]),'TipoFunc':([5,8,],[9,9,]),'TYPE':([5,8,20,53,],[11,11,25,75,]),'ListaVars':([6,21,],[15,26,]),'Body':([17,38,76,90,91,109,],[22,50,94,105,106,112,]),'Statements':([23,29,],[28,45,]),'Statement':([23,29,],[29,29,]),'ASSIGN':([23,29,],[30,30,]),'CONDITION':([23,29,],[31,31,]),'CYCLE':([23,29,],[32,32,]),'F_Call':([23,29,],[33,33,]),'Print':([23,29,],[34,34,]),'Parametros':([24,52,],[41,74,]),'Expresion':([46,47,48,49,51,62,89,92,],[56,69,70,71,69,87,69,107,]),'Exp':([46,47,48,49,51,62,78,79,80,89,92,],[57,57,57,57,57,57,95,96,97,57,57,]),'Termino':([46,47,48,49,51,62,78,79,80,81,82,89,92,],[59,59,59,59,59,59,59,59,59,98,99,59,59,]),'Factor':([46,47,48,49,51,62,78,79,80,81,82,84,85,89,92,],[61,61,61,61,61,61,61,61,61,61,61,100,101,61,61,]),'Subf':([46,47,48,49,51,58,60,62,78,79,80,81,82,84,85,89,92,],[63,63,63,63,63,83,86,63,63,63,63,63,63,63,63,63,63,]),'CTE':([46,47,48,49,51,58,60,62,78,79,80,81,82,84,85,89,92,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'Expresiones':([47,51,89,],[68,73,104,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Programa","S'",1,None,None,None),
  ('Programa -> PROGRAM ID SEMICOLON VARS FUNCS MAIN Body END SEMICOLON','Programa',9,'p_programa','littleDuck_parser.py',6),
  ('VARS -> VAR ListaVars COLON TYPE SEMICOLON','VARS',5,'p_vars','littleDuck_parser.py',11),
  ('VARS -> <empty>','VARS',0,'p_vars','littleDuck_parser.py',12),
  ('ListaVars -> ID COMMA ListaVars','ListaVars',3,'p_lista_vars','littleDuck_parser.py',17),
  ('ListaVars -> ID','ListaVars',1,'p_lista_vars','littleDuck_parser.py',18),
  ('TYPE -> INT','TYPE',1,'p_type','littleDuck_parser.py',23),
  ('TYPE -> FLOAT','TYPE',1,'p_type','littleDuck_parser.py',24),
  ('TYPE -> STRING','TYPE',1,'p_type','littleDuck_parser.py',25),
  ('FUNCS -> Funcion FUNCS','FUNCS',2,'p_funcs','littleDuck_parser.py',30),
  ('FUNCS -> <empty>','FUNCS',0,'p_funcs','littleDuck_parser.py',31),
  ('Funcion -> TipoFunc ID LPARENTH Parametros RPARENTH COLON Body','Funcion',7,'p_funcion','littleDuck_parser.py',36),
  ('TipoFunc -> VOID','TipoFunc',1,'p_tipofunc','littleDuck_parser.py',41),
  ('TipoFunc -> TYPE','TipoFunc',1,'p_tipofunc','littleDuck_parser.py',42),
  ('Parametros -> ID COMMA Parametros','Parametros',3,'p_parametros','littleDuck_parser.py',47),
  ('Parametros -> ID COLON TYPE','Parametros',3,'p_parametros','littleDuck_parser.py',48),
  ('Parametros -> <empty>','Parametros',0,'p_parametros','littleDuck_parser.py',49),
  ('Body -> LBRACE Statements RBRACE','Body',3,'p_body','littleDuck_parser.py',54),
  ('Statements -> Statement Statements','Statements',2,'p_statements','littleDuck_parser.py',59),
  ('Statements -> <empty>','Statements',0,'p_statements','littleDuck_parser.py',60),
  ('Statement -> ASSIGN','Statement',1,'p_statement','littleDuck_parser.py',65),
  ('Statement -> CONDITION','Statement',1,'p_statement','littleDuck_parser.py',66),
  ('Statement -> CYCLE','Statement',1,'p_statement','littleDuck_parser.py',67),
  ('Statement -> F_Call','Statement',1,'p_statement','littleDuck_parser.py',68),
  ('Statement -> Print','Statement',1,'p_statement','littleDuck_parser.py',69),
  ('ASSIGN -> ID EQUAL Expresion SEMICOLON','ASSIGN',4,'p_assign','littleDuck_parser.py',74),
  ('CONDITION -> IF LPARENTH Expresion RPARENTH Body','CONDITION',5,'p_condition','littleDuck_parser.py',79),
  ('CONDITION -> IF LPARENTH Expresion RPARENTH Body ELSE Body','CONDITION',7,'p_condition','littleDuck_parser.py',80),
  ('CYCLE -> WHILE LPARENTH Expresion RPARENTH Body SEMICOLON','CYCLE',6,'p_cycle','littleDuck_parser.py',85),
  ('CYCLE -> DO Body WHILE LPARENTH Expresion RPARENTH SEMICOLON','CYCLE',7,'p_cycle','littleDuck_parser.py',86),
  ('F_Call -> ID LPARENTH Expresiones RPARENTH SEMICOLON','F_Call',5,'p_f_call','littleDuck_parser.py',91),
  ('Expresiones -> Expresion COMMA Expresiones','Expresiones',3,'p_expresiones','littleDuck_parser.py',96),
  ('Expresiones -> Expresion','Expresiones',1,'p_expresiones','littleDuck_parser.py',97),
  ('Expresiones -> <empty>','Expresiones',0,'p_expresiones','littleDuck_parser.py',98),
  ('Print -> PRINT LPARENTH Expresiones RPARENTH SEMICOLON','Print',5,'p_print','littleDuck_parser.py',103),
  ('Expresion -> Expresion NOTEQUAL Exp','Expresion',3,'p_expresion','littleDuck_parser.py',108),
  ('Expresion -> Expresion LESSTHAN Exp','Expresion',3,'p_expresion','littleDuck_parser.py',109),
  ('Expresion -> Expresion GREATERTHAN Exp','Expresion',3,'p_expresion','littleDuck_parser.py',110),
  ('Expresion -> Exp','Expresion',1,'p_expresion','littleDuck_parser.py',111),
  ('Exp -> Exp PLUS Termino','Exp',3,'p_exp','littleDuck_parser.py',116),
  ('Exp -> Exp MINUS Termino','Exp',3,'p_exp','littleDuck_parser.py',117),
  ('Exp -> Termino','Exp',1,'p_exp','littleDuck_parser.py',118),
  ('Termino -> Termino MULTIPLY Factor','Termino',3,'p_termino','littleDuck_parser.py',123),
  ('Termino -> Termino DIVIDE Factor','Termino',3,'p_termino','littleDuck_parser.py',124),
  ('Termino -> Factor','Termino',1,'p_termino','littleDuck_parser.py',125),
  ('Factor -> LPARENTH Expresion RPARENTH','Factor',3,'p_factor','littleDuck_parser.py',130),
  ('Factor -> PLUS Subf','Factor',2,'p_factor','littleDuck_parser.py',131),
  ('Factor -> MINUS Subf','Factor',2,'p_factor','littleDuck_parser.py',132),
  ('Factor -> Subf','Factor',1,'p_factor','littleDuck_parser.py',133),
  ('Subf -> CTE','Subf',1,'p_subf','littleDuck_parser.py',138),
  ('Subf -> ID','Subf',1,'p_subf','littleDuck_parser.py',139),
  ('CTE -> CTE_INT','CTE',1,'p_cte','littleDuck_parser.py',144),
  ('CTE -> CTE_FLOAT','CTE',1,'p_cte','littleDuck_parser.py',145),
  ('CTE -> CTE_STRING','CTE',1,'p_cte','littleDuck_parser.py',146),
]
